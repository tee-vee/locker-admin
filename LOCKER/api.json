---
swagger: '2.0'

################################################################################
#                              API Information                                 #
################################################################################
info:
  version: "0.1.0"
  title: Locision Locker Life API Reference
  description: |
    The first version of the Locision Locker Life API is an exciting step forward 
    towards making it easier for users to have open access to their data. 
    We created it so that you can surface the amazing content Locision users 
    share every second, in fun and innovative ways.

    Build something great!

    Once you've
    [registered your client](https://l2-locker.locision.com/developer/register/) it's easy
    to start requesting data from Locision Locker Life.

    All endpoints are only accessible via https and are located at
    `locker-life.locisionapi.com`. For instance: you can grab the most popular photos at
    the moment by accessing the following URL with your client ID
    (replace CLIENT-ID with your own):
    ```
      https://locker-life-locisionapi.com/v1/media/popular?client_id=CLIENT-ID
    ```
    You're best off using an access_token for the authenticated user for each
    endpoint, though many endpoints don't require it.
    In some cases an access_token will give you more access to information, and
    in all cases, it means that you are operating under a per-access_token limit
    vs. the same limit for your single client_id.


    ## Limits
    Be nice. If you're sending too many requests too quickly, we'll send back a
    `503` error code (server unavailable).
    You are limited to 5000 requests per hour per `access_token` or `client_id`
    overall. Practically, this means you should (when possible) authenticate
    users so that limits are well outside the reach of a given user.

    ## Deleting Objects
    We do our best to have all our URLs be
    [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer).
    Every endpoint (URL) may support one of four different http verbs. GET
    requests fetch information about an object, POST requests create objects,
    PUT requests update objects, and finally DELETE requests will delete
    objects.

    Since many old browsers don't support PUT or DELETE, we've made it easy to
    fake PUTs and DELETEs. All you have to do is do a POST with _method=PUT or
    _method=DELETE as a parameter and we will treat it as if you used PUT or
    DELETE respectively.

    ## Structure

    ### The Envelope
    Every response is contained by an envelope. That is, each response has a
    predictable set of keys with which you can expect to interact:
    ```json
    {
        "meta": {
            "code": 200
        },
        "data": {
            ...
        },
        "pagination": {
            "next_url": "...",
            "next_max_id": "13872296"
        }
    }
    ```

    #### META
    The meta key is used to communicate extra information about the response to
    the developer. If all goes well, you'll only ever see a code key with value
    200. However, sometimes things go wrong, and in that case you might see a
    response like:
    ```json
    {
        "meta": {
            "error_type": "OAuthException",
            "code": 400,
            "error_message": "..."
        }
    }
    ```

    #### DATA
    The data key is the meat of the response. It may be a list or dictionary,
    but either way this is where you'll find the data you requested.
    #### PAGINATION
    Sometimes you just can't get enough. For this reason, we've provided a
    convenient way to access more data in any request for sequential data.
    Simply call the url in the next_url parameter and we'll respond with the
    next set of data.
    ```json
    {
        ...
        "pagination": {
            "next_url": "https://api.instagram.com/v1/tags/puppy/media/recent?access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d&max_id=13872296",
            "next_max_id": "13872296"
        }
    }
    ```
    On views where pagination is present, we also support the "count" parameter.
    Simply set this to the number of items you'd like to receive. Note that the
    default values should be fine for most applications - but if you decide to
    increase this number there is a maximum value defined on each endpoint.

    ### JSONP
    If you're writing an AJAX application, and you'd like to wrap our response
    with a callback, all you have to do is specify a callback parameter with
    any API call:
    ```
    https://api.instagram.com/v1/tags/coffee/media/recent?access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d&callback=callbackFunction
    ```
    Would respond with:
    ```js
    callbackFunction({
        ...
    });
    ```
  termsOfService: http://instagram.com/about/legal/terms/api


################################################################################
#                  Host, Base Path, Schemes and Content Types                  #
################################################################################
host: locker-life.locisionapi.com
basePath: /v1
schemes:
  - https
produces:
  - application/json
consumes:
  - application/json

################################################################################
#                                   Tags                                       #
################################################################################
tags:
  - name: Integeration
  - name: Internal
  - name: Relationships
    description: |
      Relationships are expressed using the following terms:

      **outgoing_status**: Your relationship to the user. Can be "follows",
        "requested", "none".
      **incoming_status**: A user's relationship to you. Can be "followed_by",
        "requested_by", "blocked_by_you", "none".
  - name: Media
    description: |
      At this time, uploading via the API is not possible. We made a conscious
      choice not to add this for the following reasons:

      * Instagram is about your life on the go – we hope to encourage photos
        from within the app.
      * We want to fight spam & low quality photos. Once we allow uploading
        from other sources, it's harder to control what comes into the Instagram
        ecosystem. All this being said, we're working on ways to ensure users
        have a consistent and high-quality experience on our platform.
  - name: Commnts
  - name: Likes
  - name: Tags
  - name: Location
  - name: Subscribtions
  
################################################################################
#                                  Security                                    #
################################################################################
securityDefinitions:
  oauth:
    type: oauth2
    flow: implicit
    authorizationUrl: https://locisionapi.com/oauth/authorize/?client_id=CLIENT-ID&redirect_uri=REDIRECT-URI&response_type=token
    scopes:
      basic: |
       to read any and all data related to a user (e.g. following/followed-by
        lists, photos, etc.) (granted by default)
      comments: to create or delete comments on a user’s behalf
      relationships: to follow and unfollow users on a user’s behalf
      likes: to like and unlike items on a user’s behalf
  key:
    type: apiKey
    in: query
    name: access_token
security:
  - oauth:
    - basic
    - comments
    - relationships
    - likes
  - key: []


################################################################################
#                                   Parameters                                 #
################################################################################
parameters:
  parcel-id:
    name: parcel-id
    in: path
    description:  Parcel unique identifier number
    type: string
    required: true
  order-uid:
    name: order-uid
    in: path
    description: The order unique identifier number, it combine by username and order id.
    type: string
    required: true
  account-uid:
    name: account-uid
    in: path
    description: The account unique identifier, it will be `account id` OR `account username`.
    type: string
    required: true
  billing-date:
    name: billing-date
    in: path
    description: The billing date
    type: string
    required:  true

paths:

  /accounts:
    get:
      description: |
        Show all accounts.
      responses:
        200:
          description:  Successful response
          schema:
            title: ArrayOfAccount
            type: array
            items:
              $ref: '#/definitions/Account'
              
    post:
      description: |
        Account register, create a new account.
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Account'
  
  /accounts/{account-uid}:
    get:
      description: |
        Show account information
      parameters:
        - $ref: '#/parameters/account-uid'
      responses:
        200:
          description:  Successful response
          schema:
            $ref: '#/definitions/Account'

  /orders:
    get:
      description: |
        Gets `Order` objects.
        Optional query param of **uid** determines
        uid of returned array 
      parameters:
        - name: uid
          in: query
          description: The order unique identifier number
          required: true
          type: string
      responses:
        200:
          description: Successful response
          schema:
            title: ArrayOfOrder
            type: array
            items:
              $ref: '#/definitions/Order'
    post:
      description: |
        Create a new `Order`.
      parameters:
        - name: body
          in: body
          description: Order object
          schema:
            type: object
            description: Order object which will created.
            properties:
              type:
                type: string
      responses:
        200:
          description: Successful response
          schema:
            title: ArrayOfOrder
            type: array
            items:
              $ref: '#/definitions/Order'
        
  /orders/{order-uid}/shipment:
    patch:
      description: |
        Modify order's `shipment` information
      parameters:
        - $ref: '#/parameters/order-uid'
        - name: body
          in: body
          description: Shipment information for specified order uid
          schema:
            type: object
            description: ShipmentObject
            properties:
              order_uid:
                type: string
              shipment:
                $ref: '#/definitions/Shipment'
          
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Shipment'
  
  /lifecycle/{parcel-id}:
    get:
      summary: Get parcel's lifecycle
      description: Get parcel's lifecycle
      parameters:
        - $ref: '#/parameters/parcel-id'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Lifecycle'
    
  
  /billings:
    get:
      description: |
        Show billing history for specified account
      responses:
        200:
          description: Successful response
          schema:
            type: array
            title: ArrayOfBilling
            items:
              $ref: '#/definitions/Billing'
  
  /billings/{billing-date}:
    get:
      description: |
        Show billing for specified account and date
      parameters:
        - $ref: '#/parameters/billing-date'
      responses: 
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Billing'
      
    
          
  

definitions:

  Order:
    type: object
    properties:
      username:
        type: string
      id:
        type: string
      type:
        type: string
      shipment:
        $ref: '#/definitions/Shipment'
      parcels:
        type: array
        title: ArrayOfParcel
        items:
          $ref: '#/definitions/Parcel'
          
  Label:
    type: object
    properties:
      format:
        type: string
      uri:
        type: string
      description:
        type: string
      

  Parcel:
    type: object
    properties:
      id:
        type: string
      description:
        type: string
      type:
        type: string
      label:
        $ref: '#/definitions/Label'
      dimension:
        type: object
        properties:
          width:
            type: number
          height:
            type: number
          unit:
            type: string
      weight:
        type: object
        properties:
          value:
            type: number
          unit:
            type: string
      items:
        type: array
        title:  ArrayOfItems
        items:
          $ref: '#/definitions/Item'
      references:
        type: object

  Item:
    type: object
    properties:
      description:
        type: string
      quantity:
        type: integer
        format: int32
  
  Account:
    type: object
    properties:
      username:
        type: string
      role:
        type: string
      profile:
        $ref: '#/definitions/Profile'
  
  Profile:
    type: object
    properties:
      name:
        type: string
      sex:
        type: string
        enum:
          - female
          - male
          - other
  
  Shipment:
    type: object
    properties:
      ship_from:
        type: object
        properties:
          country:
            type: string
          contact_name:
            type: string
          contact_phone:
            type: string
          contact_email:
            type: string
          contact_address1:
            type: string
          contact_address2:
            type: string
          contact_address3:
            type: string
          city:
            type: string
      ship_to:
        type: object
        properties:
          country:
            type: string
            
  Billing:
    type: object
    properties:
      account:
        type: string
      bill_time:
        type: string
        format: data-time
      currency:
        type: string
      money:
        type: number
      status:
        type: integer
            
  Lifecycle:
    type: object
    properties:
      parcel_id:
        type: string
      created_at:
        type: string
        format: date-time
      reference:
        type: string
      courier:
        type: string
      status:
        type: integer
      message:
        type: string
        
      
  
  
  
      
      
    
        
    
        