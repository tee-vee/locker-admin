'////////////////////////////////////////////////////////////////////////////
'// Copyright (c) Microsoft Corporation.  All rights reserved
'//
'// Title:		ImportGPO.wsf
'// Author:		mtreit@microsoft.com
'// Created:	1/7/2002
'//
'// Purpose:	Takes a backed-up GPO and imports the settings from the
'//				backup into a specified target GPO. If no target is
'//				specified, then the name of the GPO that was backed up
'//				will be used. In that case, if a GPO with that name exists
'//				it will be imported into - otherwise a new GPO will be
'//				created.
'// Revision:	Ported from JScript->VBScript by dtsaltas (October 24, 2002)
'//
'////////////////////////////////////////////////////////////////////////////

'///////////////////////////////////////
'// Initialization
'///////////////////////////////////////
<job>

' Include necessary libraries
<script language="JScript" src="Lib_CommonGPMCFunctions.js"/>
<script language="VBScript">

' Create global objects for use by the rest of the script
Dim GPM       : Set GPM = CreateObject("GPMgmt.GPM")
Dim Constants : Set Constants = GPM.GetConstants()

'///////////////////////////////////////
'// Main script
'///////////////////////////////////////

' Handle command line arguments
Dim ArgumentList
Set ArgumentList = ProcessCommandLineArguments()
Dim szBackupLocation  : szBackupLocation  = ArgumentList.Item("BackupLocation")
Dim szBackupID        : szBackupID        = ArgumentList.Item("BackupID")
Dim szTargetGPO       : szTargetGPO       = ArgumentList.Item("TargetGPO")
Dim strDomainName     : strDomainName     = ArgumentList.Item("Domain")
Dim strMigrationTable : strMigrationTable = ArgumentList.Item("MigrationTable")
Dim bCreateIfNeeded   : bCreateIfNeeded   = ArgumentList.Item("CreateIfNeeded")

' Validate the path given
Dim bValidPath	: bValidPath = ValidatePath(szBackupLocation)

If bValidPath = false Then
	WScript.Echo "The path '" & szBackupLocation & "' could not be found."
	WScript.Echo "Verify the path exists."
	WScript.Quit
End If

' Initialize the Domain object
Dim GPMDomain
Set GPMDomain = GPM.GetDomain(strDomainName, "", Constants.UseAnyDC)

' Initialize the migration table, if necessary
Dim GPMMigrationTable : GPMMigrationTable = vbNull

If strMigrationTable <> "" Then

   On Error Resume Next
      Set GPMMigrationTable = GPM.GetMigrationTable(strMigrationTable)
	
   If Err.Number <> 0 Then
      WScript.Echo "Could not initialize migration table '" & strMigrationTable & "'"
      WScript.Quit(-1)
   End If

End If

' Get the backup specified
On Error Resume Next
Set GPMBackup = GetBackup(szBackupLocation, szBackupID)

If GPMBackup Is Nothing Then
	WScript.Echo "The import operation could not be performed."
	WScript.Quit
End If

WScript.Echo "Backup found:"
WScript.Echo vbTab & "ID:"        & vbTab & vbTab & GPMBackup.ID
WScript.Echo vbTab & "Timestamp:" & vbTab &         GPMBackup.TimeStamp
WScript.Echo vbTab & "GPO ID:"    & vbTab & vbTab & GPMBackup.GPOID
WScript.Echo vbTab & "GPO Name:"  & vbTab &         GPMBackup.GPODisplayName
WScript.Echo vbTab & "Comment:"   & vbTab &         GPMBackup.Comment
WScript.Echo ""

' Now do the import
ImportFromBackup GPMBackup, szTargetGPO, GPMMigrationTable, bCreateIfNeeded, GPMDomain

'///////////////////////////////////////
'// Function Definitions
'///////////////////////////////////////

' Imports settings from a backup into a GPO. If a target GPO name is specified, that name
' is used for the GPO that is imported into. If a single GPO with that name already exists,
' it is used. If no GPO with that name exists, a new one is created.
' Also, if a blank target name is specified, then the name from the backup is re-used.
Function ImportFromBackup(GPMBackup, szTargetGPOName, GPMMigrationTable, bCreateIfNeeded, GPMDomain)

	Dim GPMGPO
	Dim bNewGPOCreated : bNewGPOCreated = False

	' Use the name from the backup if one was not specified
	If szTargetGPOName = "" Then
		szTargetGPOName = GPMBackup.GPODisplayName
	End If
	
	' See if a GPO with the same name as the backup already exists. If so, use it.
	
	On Error Resume Next
	Set GPMGPO = GetGPO(szTargetGPOName, GPMDomain)
	iGPOCount = GPMGPO.Count
     
	If GPMGPO Is Nothing OR iGPOCount > 0 Then

		' The GPO was not found, or more than one GPO with that name already exists, so
		' create a new GPO with the same name as the backup if the CreateIfNeeded flag
		' was specified
		
		If bCreateIfNeeded = True Then
			On Error Resume Next
			Err.Clear

			Set GPMGPO = GPMDomain.CreateGPO()
			
			If Err.Number <> 0 Then
				WScript.Echo "There was an error creating the GPO."
				WScript.Echo "The error was: " & Hex(Err.Number) & " - " & Err.Description
				Exit Function
			End If

			' Now set the display name. If this fails, delete the GPO and report an error
			GPMGPO.DisplayName = szTargetGPOName
			
			If Err.Number <> 0 Then
				GPMGPO.Delete
				WScript.Echo "There was an error creating the GPO."
				WScript.Echo "The error was: " & Hex(Err.Number) & " - " & Err.Description
				Exit Function
			End If
			
			bNewGPOCreated = True
			WScript.Echo "New GPO created successfully."
		Else
			WScript.Echo "The specified GPO '" & szTargetGPOName & "' could not be found, or more than one GPO with that name exists."
			WScript.Echo "To create the GPO before doing the import, re-run with the CreateIfNeeded flag."
			Exit Function
		End If
	
	Else
		WScript.Echo "Found existing GPO '" & GPMGPO.DisplayName & "' to import into."
	End If
		
		
	' Import the settings from the backup into the new GPO
	On Error Resume Next
	Err.Clear

	If GPMMigrationTable = vbNull Then
		Set GPMResult = GPMGPO.Import(0, GPMBackup)
	Else
		Set GPMResult = GPMGPO.Import(0, GPMBackup, GPMMigrationTable)
	End If
		
	' Call the OverallStatus method on the GPMResult. This will throw an exception if there
	' were any errors during the actual operation.
	GPMResult.OverallStatus
	
	If Err.Number <> 0 Then
		' If we were able to get a GPMResult object, print any status message errors
		If Not GPMResult Is Nothing Then
			PrintStatusMessages GPMResult
		End If

		' If we created a new GPO, but could not import the settings into it, delete it
		If bNewGPOCreated = True Then
			GPMGPO.Delete
		End If
		
		WScript.Echo vbCrLf & "Error importing settings into GPO " & GPMBackup.GPODisplayName
		WScript.Echo Err.Number & " - " & Err.Description
		Exit Function

	End If

	' Print any status message warnings
	PrintStatusMessages GPMResult
	WScript.Echo "The import operation completed successfully."

End Function


' Takes a WScript.Arguments object and returns a dictionary object
' containing the named arguments and values that were passed in
Function ProcessCommandLineArguments()

	Dim strBackupLocation : strBackupLocation = ""
	Dim szBackupID        : szBackupID        = ""
	Dim szTargetGPOName   : szTargetGPOName   = ""
	Dim szDomainName      : szDomainName      = ""
	Dim szMigrationTable  : szMigrationTable  = ""
	Dim bCreateIfNeeded   : bCreateIfNeeded   = False


	' Check if this is cscript. If not, print an error and bail out

	If UCase(Right(WScript.FullName,11)) = "WSCRIPT.EXE" Then
		WScript.Echo "You must use cscript.exe to execute this script."
		WScript.Quit(-1)
	End If

	If WScript.Arguments.Length = 0 Then
		WScript.Arguments.ShowUsage()
		WScript.Quit(0)
	End If
	
	Dim Result
        Set Result = CreateObject("Scripting.Dictionary")

	szBackupLocation = WScript.Arguments(0)
	szBackupID       = WScript.Arguments(1)
	
	' The target GPO name is optional - see if it was passed in
	If WScript.Arguments.Unnamed.Length > 2 Then
	
		szTargetGPOName = WScript.Arguments.Unnamed(2)
	End If

	' Get the migration table to use, if specified
	If WScript.Arguments.Named.Exists("MigrationTable") Then
	
		szMigrationTable = WScript.Arguments.Named("MigrationTable")
	End If

	' Check if we need to create the target GPO if it doesn't exist
	If WScript.Arguments.Named.Exists("CreateIfNeeded") Then
	
		bCreateIfNeeded = True
	End If

	' Get the domain to use, if specified
	If WScript.Arguments.Named.Exists("Domain") Then
	
		szDomainName = WScript.Arguments.Named("Domain")
	End If

	' Get the current domain if none was specified
	If szDomainName = "" Then
	
		szDomainName = GetDNSDomainForCurrentUser()
	End If

	Result.Add "BackupLocation" , szBackupLocation
	Result.Add "BackupID"       , szBackupID
	Result.Add "TargetGPO"      , szTargetGPOName
	Result.Add "MigrationTable" , szMigrationTable
	Result.Add "CreateIfNeeded" , bCreateIfNeeded
	Result.Add "Domain"         , szDomainName
	
	Set ProcessCommandLineArguments = Result

End Function

</script>

<!-- Usage and command line argument information -->
<runtime>

<description>
Takes a backed-up GPO and imports the settings from the	backup
into a specified target GPO.

If no target is	specified, then the name of the GPO that was 
backed up will be used.

In that case, if a GPO with that name exists, it will be imported
into. Otherwise, a new GPO will be created.
</description>

<unnamed name="BackupLocation" helpstring="File system location where the backup is located" type="string" required="true" />
<unnamed name="BackupID" helpstring="The GPO name or backup ID (GUID) of the backup to use" type="string" required="true" />
<unnamed name="TargetGPO" helpstring="The target GPO to import settings into" type="string" required="false" />
<named   name="MigrationTable" helpstring="Optional migration table to use when doing the import" type="string" required="false" />
<named   name="CreateIfNeeded" helpstring="Creates a new GPO if the specified target GPO does not exist" type="simple" required="false" />
<named   name="Domain" helpstring="DNS name of domain" type="string" required="false" />

<example>
Example: ImportGPO.wsf c:\GPO-Backups TestGPO TargetGPO /CreateIfNeeded
</example>

</runtime>

</job>