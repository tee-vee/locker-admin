////////////////////////////////////////////////////////////////////////////
// Copyright (c) Microsoft Corporation.  All rights reserved
//
// Title:	SetSOMPermissions.wsf
// Author:	mtreit@microsoft.com
// Created:	1/25/2002
//
// Purpose:	Sets policy-related permissions on a given site, domain or OU
////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////
// Initialization
///////////////////////////////////////
<job>

// Include necessary libraries
<script language="JScript" src="Lib_CommonGPMCFunctions.js"/>

<script language="JScript">

// Create global objects for use by the rest of the script
var GPM = new ActiveXObject("GPMgmt.GPM");
var Constants = GPM.GetConstants();

///////////////////////////////////////
// Main script
///////////////////////////////////////

// Handle command line arguments
var ArgumentList = ProcessCommandLineArguments(WScript.Arguments);
var szDomainName = ArgumentList.Item("Domain");
var szSOMName = ArgumentList.Item("SOM");
var szGroupName = ArgumentList.Item("Group");
var szPermission = ArgumentList.Item("Permission");
var bInherit = ArgumentList.Item("Inherit");

// Initialize the Domain object
var GPMDomain = GPM.GetDomain(szDomainName, "", Constants.UseAnyDC);

// Determine the LDAP suffix for the domain, which we will use when doing our
// ADSI queries
//
var szGlobalLDAPSuffix = GPMDomain.GetSOM("").Path;

// If the user passed in the domain name as the SOM, handle that
if (szSOMName.toLowerCase() == szDomainName.toLowerCase())
{
	szSOMName = "LDAP://" + szGlobalLDAPSuffix;
}

// Update the permissions on the SOM
UpdateSOMPermissions(szSOMName, szGroupName, szPermission);

///////////////////////////////////////
// Function Definitions
///////////////////////////////////////

// Sets permissions on a given SOM for the specified trustee
function UpdateSOMPermissions(szSOM, szTrustee, szPermission)
{
	var szType, szName;
	var bSetAll = false;
	var bRemoveAll = false;

	// First determine the permission we need to set
	var perm, szPermissionName;
	switch (szPermission.toLowerCase())
	{
		case "linkgpos":
		perm = Constants.PermSOMLink;
		szPermissionName = "Link GPOs";
		break;

		case "rsoplogging":
		perm = Constants.PermSOMLogging;
		szPermissionName = "RSoP Logging Mode";
		break;
		
		case "rsopplanning":
		szPermissionName = "RSoP Planning Mode";
		perm = Constants.PermSOMPlanning;
		break;

		case "all":
		bSetAll = true;
		perm = Constants.PermSOMLink;
		break;

		case "none":
		bRemoveAll = true;
		perm = Constants.PermSOMLink;
		break;
		
		default:
		perm = null;
		break;
	}

	if (perm == null)
	{
		WScript.Echo("\nThe specified permission type " + szPermission + " is not recognized.");
		return;
	}

	
	// Get a reference to the desired GPMSOM object
	var GPMSOM = GetSOM(szSOM);
	if (!GPMSOM)
	{
		WScript.Echo("\nNo action taken.");
		return;
	}
	
	// Determine the type and name of the SOM
	var szType;
	switch (GPMSOM.Type)
	{
		case Constants.SOMSite:
		szType = "site";
		break;
		
		case Constants.SOMOU:
		szType = "OU";
		break;
		
		case Constants.SOMDomain:
		szType = "domain";
		break;
	}

	szName = GPMSOM.Name;
	
	// Get the current list of permissions
	var GPMSecInfo = GPMSOM.GetSecurityInfo();
	var GPMPermission;
	
	// Set the permissions
	if (bRemoveAll == true)
	{
		try
		{
			GPMSecInfo.RemoveTrustee(szTrustee);
			WScript.Echo("Removed all policy-related rights from " + szType + " '" + szName + "' for trustee '" + szTrustee + "'");
		}
		catch (err)
		{
			WScript.Echo("Error removing trustee '" + szTrustee + "' from having permissions on " + szType + " '" + szName + "'");
			WScript.Echo("The SOM may be inheriting rights from a higher container, or you may not have sufficient rights.");
			WScript.Echo(ErrCode(err.number) + " - " + err.description);
			return;
		}
		
	}

	if (bSetAll == true)
	{
		try
		{	
			// Add 'link GPO' rights
			if (! InheritedPermissionExists(GPMSecInfo, szTrustee, Constants.PermSOMLink))
			{
				GPMPermission = GPM.CreatePermission(szTrustee, Constants.PermSOMLink, bInherit);
				GPMSecInfo.Add(GPMPermission);
				WScript.Echo("Added the 'Link GPOs' permission for " + szTrustee + " to " + szType + " '" + szName + "'"); 
			}
			else
			{
				WScript.Echo("\nAn inherited 'Link GPOs' permission already exists for " + szTrustee + ".");
				return;
			}
			
			// Add 'RSoP Logging' rights
			if (! InheritedPermissionExists(GPMSecInfo, szTrustee, Constants.PermSOMLogging))
			{
				GPMPermission = GPM.CreatePermission(szTrustee, Constants.PermSOMLogging, bInherit);
				GPMSecInfo.Add(GPMPermission);
				WScript.Echo("Added the 'RSoP Logging Mode' permission for " + szTrustee + " to " + szType + " '" + szName + "'");
			}
			else
			{
				WScript.Echo("\nAn inherited 'RSoP Logging Mode' permission already exists for " + szTrustee + ".");
				return;
			}
			
			// Add 'RSoP Planning' rights
			if (! InheritedPermissionExists(GPMSecInfo, szTrustee, Constants.PermSOMPlanning))
			{
				GPMPermission = GPM.CreatePermission(szTrustee, Constants.PermSOMPlanning, bInherit);
				GPMSecInfo.Add(GPMPermission);
				WScript.Echo("Added the 'RSoP Planning Mode' permission for " + szTrustee + " to " + szType + " '" + szName + "'");
			}
			else
			{
				WScript.Echo("\nAn inherited 'RSoP Planning Mode' permission already exists for " + szTrustee + ".");
				return;
			}
			
		}
		catch (err)
		{
			WScript.Echo("Error creating permissions for trustee '" + szTrustee + "' on " + szType + " '" + szName + "'");
			WScript.Echo(ErrCode(err.number) + " - " + err.description);
			return;
		}
	}
	
	if (bSetAll == false && bRemoveAll == false)
	{
		try
		{

			if (! InheritedPermissionExists(GPMSecInfo, szTrustee, perm))
			{
				GPMPermission = GPM.CreatePermission(szTrustee, perm, bInherit);
				GPMSecInfo.Add(GPMPermission);
				WScript.Echo("Added the '" + szPermissionName + "' permission for " + szTrustee + ".");
			}
			else
			{
				WScript.Echo("\nAn inherited '" + szPermissionName + "' permission already exists for " + szTrustee + ".");
			}

		}
		catch (err)
		{
			WScript.Echo("Error creating permission for trustee '" + szTrustee + "' on SOM '" + szName + "'");
			WScript.Echo(ErrCode(err.number) + " - " + err.description);
			return;
		}
	}
	
	// Finally, set the new security info on the SOM
	try
	{
		GPMSOM.SetSecurityInfo(GPMSecInfo);
	}
	catch (err)
	{
		WScript.Echo("Error updating security on SOM '" + szName + "'");
		WScript.Echo(ErrCode(err.number) + " - " + err.description);
		return;
	}
}

// Checks if a specified permission is being inherited for a give trustee
function InheritedPermissionExists(GPMSecInfo, szTrustee, Permission)
{
	var e = new Enumerator(GPMSecInfo);
	var GPMPermission, szTrusteeName;
	for (; !e.atEnd(); e.moveNext())
	{
		GPMPermission = e.item();
		
		try
		{
			szTrusteeName = GPMPermission.Trustee.TrusteeName;
		}
		catch (err)
		{
			// Couldn't resolve the SID to a name - so skip it
			continue;
		}

		if (GPMPermission.Trustee.TrusteeName.toLowerCase() == szTrustee.toLowerCase())
		{
			if (Permission == GPMPermission.Permission && GPMPermission.Inherited == true)
			{
				return true;
			}
		}
	}
	
	return false;
}

// Takes a SOM (site, domain or OU) name and returns the corresponding GPMSOM object
function GetSOM(szName)
{
	// First try to get the SOM directly, in case a valid LDAP path was passed in
	var SOM;
	try
	{
		SOM = GetObject(szName);
	}
	catch (err)
	{
		SOM = false;
	}

	if (!SOM)
	{
		// Could not get the SOM directly, so try searching for it by name
		SOM = GetSOMByName(szName);
		if (!SOM)
		{
			return false;
		}
	}

	// Now get a GPMSOM object based on the ADSI object we were returned
	var GPMSOM;
	
	// We don't know if it's a site or an OU so try both
	try
	{
		GPMSOM = GPMDomain.GetSOM(SOM.distinguishedName);
	}
	catch (err)
	{
		GPMSOM = false;
	}
	
	if (!GPMSOM)
	{
		// Try it as a site
		var adSys = new ActiveXObject("ADSystemInfo");
		var szForestName = adSys.ForestDNSName;

		try
		{
			var SitesContainer = GPM.GetSitesContainer(szForestName, szDomainName, "",0);
			// The .cn property of a site will give us just the name
			GPMSOM = SitesContainer.GetSite(SOM.cn);
		}
		catch (err)
		{
			WScript.Echo("Error getting SOM " + SOM.distinguishedName);
			return false;
		}
	}
	
	return GPMSOM;
}

// Use ADSI to get back a given site, domain or OU, based on the friendly name
function GetSOMByName(szName)
{

	// Define ADS related values - see IADS.h
	var ADS_SCOPE_BASE = 0;
	var ADS_SCOPE_ONELEVEL = 1;
	var ADS_SCOPE_SUBTREE = 2;
	
	var SOM;
	var rs, NumRecords;
	
	// Create the ADO objects and open the connection
	var ADOConnection = new ActiveXObject("ADODB.Connection");
    	var ADOCommand =  new ActiveXObject("ADODB.Command");
	ADOConnection.Provider = "ADsDSOObject";    
	ADOConnection.Open("Active Directory Provider");    
	ADOCommand.ActiveConnection = ADOConnection;
	
	// First look for OUs
	var szDomainName = GetDNSDomainForCurrentUser();
	var szDomainLDAPPath = "LDAP://" + szDomainName + "/" + szGlobalLDAPSuffix;
	var szSQL = "select AdsPath from '" + EscapeString(szDomainLDAPPath) + "'";
	szSQL += " where Name='" + EscapeString(szSOMName) + "'";

	// Execute the search
	ADOCommand.CommandText = szSQL;
	ADOCommand.Properties("Page Size") = 1000;
	ADOCommand.Properties("Timeout") = 500;
	ADOCommand.Properties("SearchScope") = ADS_SCOPE_SUBTREE;
	ADOCommand.Properties("Cache Results") = true;

	try
	{
		rs = ADOCommand.Execute();
	}
	catch (err)
	{
		WScript.Echo("There was an error executing the DS query " + szSQL);
		WScript.Echo("The error was:");
		WScript.Echo(ErrCode(err.number) + " - " + err.description);
		return false;
	}

	var numRecords = rs.RecordCount;
	
	if (numRecords != 0)
	{
		if (numRecords > 1)
		{
			WScript.Echo("\nMultiple OUs exist with the name '" + szSOMName + "'");
			WScript.Echo("Pass in one of the following LDAP paths to specify which OU you wish to modify:\n");
			
			while (! rs.eof)
			{
				WScript.Echo(rs.Fields(0));
				rs.MoveNext();
			}

			return false;			
		}
		else
		{
			SOM = GetObject(rs.Fields(0));
			return SOM;
		}
	}
	
	numRecords = 0;
	rs = null;
	
	// Now look for Sites - assume that the domain we are using is in the same
	// forest as the machine we are executing on
	var adSys = new ActiveXObject("ADSystemInfo");
	var szForestName = adSys.ForestDNSName;
	
	// Get the LDAP suffix from the forest name
	ForestDomain = GPM.GetDomain(szForestName, "", Constants.UseAnyDC);
	szLDAPSuffix = ForestDomain.GetSOM("").Path;

	var szSitesLDAPPath = "LDAP:// " + szForestName + "/" + "CN=Sites,CN=Configuration," + szLDAPSuffix;
	szSQL = "select AdsPath from '" + EscapeString(szSitesLDAPPath) + "'";
	szSQL += " where Name='" + EscapeString(szSOMName) + "'";

	// Execute the search
	ADOCommand.CommandText = szSQL;

	try
	{
		rs = ADOCommand.Execute();
	}
	catch (err)
	{
		WScript.Echo("There was an error executing the DS query " + szSQL);
		WScript.Echo("The error was:");
		WScript.Echo(ErrCode(err.number) + " - " + err.description);
		return false;
	}

	numRecords = rs.RecordCount;

	if (numRecords != 0)
	{
		if (numRecords > 1)
		{
			WScript.Echo("\nMultiple Sites exist with the name '" + szSOMName + "'");
			WScript.Echo("Pass in one of the following LDAP paths to specify which Site you wish to modify:\n");
			
			while (! rs.eof)
			{
				WScript.Echo(rs.Fields(0));
				rs.MoveNext();
			}
			
			return false;
		}
		else
		{
			SOM = GetObject(rs.Fields(0));
			return SOM;
		}
	}

	WScript.Echo("\nCould not find SOM '" + szName + "'");
	return false;
}

// Takes a WScript.Arguments object and returns a dictionary object
// containing the named arguments and values that were passed in
//
function ProcessCommandLineArguments(Arguments)
{
	var szDomainName = "";
	var szSOMName = "";
	var szGroupName = "";
	var szPermission = "";
	var bInherit = false;

	// Check if this is cscript. If not, print an error and bail out
	if (WScript.FullName.toLowerCase().search("wscript") > 0)
	{
		WScript.Echo("You must use cscript.exe to execute this script.");
		WScript.Quit();
	}

	if (Arguments.Length < 3 || !Arguments.Named.Exists("Permission"))
	{
		Arguments.ShowUsage();
		WScript.Quit();
	}
	
	var Result = new ActiveXObject("Scripting.Dictionary");

	szSOMName = Arguments(0);
	szGroupName = Arguments(1);
	szPermission = Arguments.Named("Permission");

	if (Arguments.Named.Exists("Inherit"))
	{
		bInherit = true;
	}

	if (Arguments.Named.Exists("Domain"))
	{
		szDomainName = Arguments.Named("Domain");
	}

	// Get the current domain if none was specified
	if (szDomainName == "")
	{
		szDomainName = GetDNSDomainForCurrentUser();
	}

	Result.add("SOM", szSOMName);
	Result.add("Group", szGroupName);
	Result.add("Permission", szPermission);
	Result.add("Inherit", bInherit);
	Result.add("Domain", szDomainName);
	
	return Result;
}

</script>

<!-- Usage and command line argument information -->
<runtime>

<description>
Sets policy-related permissions on a given SOM (site, domain or OU)
</description>

<unnamed name="SOM" helpstring="The name of the site, domain or OU to process" type="string" required="true" />
<unnamed name="Group" helpstring="The name of the group or user to grant permissions to" type="string" required="true" />
<named name="Permission" helpstring="The permission to grant. Can be 'LinkGPOs', 'RSoPLogging', 'RSoPPlanning', 'All' or 'None'" type="string" required="true" />
<named name="Inherit" helpstring="Specifies the permission should be inherited by all child containers" type="simple" required="false" />
<named name="Domain" helpstring="DNS name of domain" type="string" required="false" />

<example>
Example: SetSOMPermissions.wsf MarketingOU "Marketing Admins" /Permission:All /Inherit
</example>

</runtime>

</job>