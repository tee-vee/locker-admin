'////////////////////////////////////////////////////////////////////////////
'// Copyright (c) Microsoft Corporation.  All rights reserved
'//
'// Title:		CreateMigrationTable.wsf
'// Author:		mtreit@microsoft.com
'// Created:		10/12/2002
'//
'// Purpose:		Creates migration tables that can then be edited and used
'//			to map paths and security principals to new values when
'//			importing and copying GPOs.
'// Revision:		Ported from JScript->VBScript by dtsaltas (December 2002)
'//
'////////////////////////////////////////////////////////////////////////////

'///////////////////////////////////////
'// Initialization
'///////////////////////////////////////

<job>

' Include necessary libraries
<script language="JScript" src="Lib_CommonGPMCFunctions.js">
</script>

<script language=vbscript>

' Create global objects for use by the rest of the script
Dim GPM       : Set GPM = CreateObject("GPMgmt.GPM")
Dim Constants : Set Constants = GPM.GetConstants()

'///////////////////////////////////////
'// Main script
'///////////////////////////////////////

' Handle command line arguments
Dim ArgumentList     : Set ArgumentList = ProcessCommandLineArguments()
Dim szTableName      : szTableName      = ArgumentList.Item("TableName")
Dim szGPO            : szGPO            = ArgumentList.Item("GPO")
Dim bAllGPOs         : bAllGPOs         = ArgumentList.Item("AllGPOs")
Dim bOverwrite       : bOverwrite       = ArgumentList.Item("Overwrite")
Dim bMapByName       : bMapByName       = ArgumentList.Item("MapByName")
Dim szBackupLocation : szBackupLocation = ArgumentList.Item("BackupLocation")
Dim szDomainName     : szDomainName     = ArgumentList.Item("Domain")


' Initialize the Domain object
Dim GPMDomain : GPMDomain = null

If szDomainName <> "" Then
	Set GPMDomain = GPM.GetDomain(szDomainName, "", Constants.UseAnyDC)
End If

' Get the migration table
Dim GPMMigrationTable
If bOverwrite Then
	' overwrite specified, so create a new table
	Set GPMMigrationTable = GPM.CreateMigrationTable()
Else
	On Error Resume Next
	Err.Clear

	' Attempt to load the existing table
	Set GPMMigrationTable = GPM.GetMigrationTable(szTableName)

	If Err.Number <> 0 Then
		' Existing table does not exist, so create a new one
		Set GPMMigrationTable = GPM.CreateMigrationTable()
	End If
End If

If szGPO = "" AND bAllGPOs = False AND szBackupLocation = "" Then
	' No sources to process were specified, so create some sample entries
	WScript.Echo "No source specified, so creating sample entries..."
	Set GPMMigrationTable = CreateSampleMapEntries(GPMMigrationTable)
Else
	If bAllGPOs = True Then
		' Get entries for all GPOs
		Set GPMMigrationTable = CreateMapEntriesForAllGPOs(GPMMigrationTable)
	End If
	
	If szGPO <> "" Then
		' Get entries for the list of GPOs
		Set GPMMigrationTable = CreateMapEntriesForGPO(GPMMigrationTable, szGPO)
	End If
	
	If szBackupLocation <> "" Then
		Set GPMMigrationTable = CreateMapEntriesFromBackupLocation(GPMMigrationTable, szBackupLocation)
	End If
End If

' Now save the table
On Error Resume Next
Err.Clear

GPMMigrationTable.Save(szTableName)

If Err.Number <> 0 Then
	WScript.Echo "Error creating migration table '" & szTableName & "'"
	WScript.Echo Err.Number & " - " & Err.Description
	WScript.Quit

End If

On Error Goto 0
WScript.Echo vbCrLf & "Done. Migration table '" & szTableName & "' was created."

'///////////////////////////////////////
'// Function Definitions
'//////////////////////////////////////

Function CreateMapEntriesForGPO(GPMMigrationTable, szGPOName)

	' Get the GPO specified
	On Error Resume Next
	Set GPMGPO = GetGPO(szGPOName, GPMDomain)

	If IsNull(GPMGPO) Then
		WScript.Echo "Could not find GPO '" & szGPOName & "' in domain '" & GPMDomain.Domain & "'."
		Set CreateMapEntriesForGPO = GPMMigrationTable
		Exit Function
	End If
	On Error Goto 0

	' We could get back a collection of multiple GPOs instead of just one
	' If so, warn the user and do not perform any processing
	On Error Resume Next
	Err.Clear

	iGPOCount = GPMGPO.Count

	If Err.Number <> 0 Then
	   iGPOCount = 0
	End If
	On Error Goto 0

	If iGPOCount > 0 Then
		WScript.Echo "There are multiple GPOs with the name '" & szGPOName & "'"
		WScript.Echo "Please pass in the unique ID (GUID) of the GPO you want to process."
		Set CreateMapEntriesForGPO = GPMMigrationTable
		Exit Function
	End If

	WScript.Echo "Processing GPO '" & GPMGPO.DisplayName & "'"
	
	On Error Resume Next
	Err.Clear
	
	GPMMigrationTable.Add Constants.ProcessSecurity, GPMGPO
	On Error Goto 0
	
	If Err.Number <> 0 Then
		WScript.Echo "Error getting entries from GPO '" & GPMGPO.DisplayName & "'"
		WScript.Echo Err.Number & " - " & Err.Description
		Set CreateMapEntriesForGPO = Nothing
		Exit Function
	End If
	
	Set GPMMigrationTable = PopulateDestinationDefaults(GPMMigrationTable, GPMGPO.DomainName, bMapByName)
	
	Set CreateMapEntriesForGPO = GPMMigrationTable

End Function

Function CreateMapEntriesForAllGPOs(GPMMigrationTable)

	' Create the search criteria object
	Set GPMSearchCriteria = GPM.CreateSearchCriteria()

	' Get all of the GPOs by passing in the blank
	' SearchCriteria
	
	Set GPOList = GPMDomain.SearchGPOs(GPMSearchCriteria)

	' Now process the list
	For Each GPMGPO In GPOList
		WScript.Echo vbCrLf & "Processing GPO '" & GPMGPO.DisplayName & "'"

		On Error Resume Next
		Err.Clear
	
		GPMMigrationTable.Add Constants.ProcessSecurity, GPMGPO		
		On Error Goto 0

		If Err.Number <> 0 Then
			WScript.Echo "Error getting entries from GPO '" & GPMGPO.DisplayName & "'"
			WScript.Echo Err.Number & " - " & Err.Description
		End If
	Next

	Set GPMMigrationTable = PopulateDestinationDefaults(GPMMigrationTable, GPMDomain.Domain, bMapByName)
	Set CreateMapEntriesForAllGPOs = GPMMigrationTable

End Function

Function CreateMapEntriesFromBackupLocation(GPMMigrationTable, szBackupLocation)

	On Error Resume Next

	' Get the backup location specified
	Set GPMBackupDir = GPM.GetBackupDir(szBackupLocation)

	' Get the most recent backups for each GPO in the backup location
	Set GPMSearchCriteria = GPM.CreateSearchCriteria()
	GPMSearchCriteria.Add Constants.SearchPropertyBackupMostRecent, Constants.SearchOpEquals, True
	Set BackupList = GPMBackupDir.SearchBackups(GPMSearchCriteria)

	' Iterate over the list of backups and process each
	Dim szBackupDomain : szBackupDomain = ""
	For Each GPMBackup in BackupList
		WScript.Echo vbCrLf & "Processing backed up GPO '" & GPMBackup.GPODisplayName & "'"
		szBackupDomain = GPMBackup.GPODomain

		GPMMigrationTable.Add Constants.ProcessSecurity, GPMBackup
		
		If Err.Number <> 0 Then
			WScript.Echo "Error getting entries from GPO '" & GPMBackup.GPODisplayName & "'"
			WScript.Echo Err.Number & " - " & Err.Description
			Err.Clear
		End If
	Next 
	
	On Error Goto 0
	
	Set GPMMigrationTable = PopulateDestinationDefaults(GPMMigrationTable, szBackupDomain, bMapByName)
	Set CreateMapEntriesFromBackupLocation = GPMMigrationTable

End Function

Function CreateSampleMapEntries(GPMMigrationTable)
	On Error Resume Next
	Err.Clear

	Set Entry = GPMMigrationTable.AddEntry("TestDomain\PolicyAdmins", Constants.EntryTypeGlobalGroup)
	Set Entry = GPMMigrationTable.UpdateDestination(Entry.Source, Constants.DestinationOptionByRelativeName)

	Set Entry = GPMMigrationTable.AddEntry("SomeUser@TestDomain.com", Constants.EntryTypeUser)
	Set Entry = GPMMigrationTable.UpdateDestination(Entry.Source, "TestUser@ProductionDomain.com")

	Set Entry = GPMMigrationTable.AddEntry("\\TestServer\Share\Packages", Constants.EntryTypeUNCPath)
	Set Entry = GPMMigrationTable.UpdateDestination(Entry.Source, "\\ProductionServer\Packages")

	Set Entry = GPMMigrationTable.AddEntry("S-1-5-21-397125417-626881126-188441444-2714230", Constants.EntryTypeUnknown)
	Set Entry = GPMMigrationTable.UpdateDestination(Entry.Source, Constants.DestinationOptionNone)

	On Error Goto 0

	Set CreateSampleMapEntries = GPMMigrationTable
	Exit Function

End Function


' Sets the default options for the destination field in a migration table,
' given the source.
Function PopulateDestinationDefaults(GPMMigrationTable, szSourceDomain, bMapByName)

	' Set the destination field for each entry
	Set Entries = GPMMigrationTable.GetEntries()

	For Each Entry in Entries

		Select Case Entry.EntryType
		
			Case Constants.EntryTypeUNCPath
				GPMMigrationTable.UpdateDestination Entry.Source, Entry.Source
			Case Constants.EntryTypeUnknown
				' See if it looks like a SID
				If LCase(Left(Entry.Source,4)) = "s-1-" Then
					GPMMigrationTable.UpdateDestination Entry.Source, Constants.DestinationOptionSameAsSource
				Else
					' Just add a destination matching the source
					GPMMigrationTable.UpdateDestination Entry.Source, Entry.Source
				End If
			
			Case Else
				' Determine the domain by parsing the string
				szEntrySourceDomain = ""
				str = Entry.Source

				Set regEx = New RegExp
				regEx.Pattern = "@"
				regEx.Global = True
				Set Matches = regEx.Execute(str)
        	                loc = 0

				For Each Match in Matches
					loc = Match.FirstIndex
				Next

				If loc > 0 Then
					szEntrySourceDomain = Mid(str, loc + 2)
				End If

			If bMapByName = True Then
				If LCase(szEntrySourceDomain) <> LCase(szSourceDomain) Then
					WScript.Echo vbCrLf & "Entry '" & Entry.Source & "' is defined in an external domain."
					WScript.Echo "This will not be mapped by name and will be set to be copied as is."
				Else
					' Set it to map by relative name
					GPMMigrationTable.UpdateDestination Entry.Source, Constants.DestinationOptionByRelativeName
				End If
			Else
		
				GPMMigrationTable.UpdateDestination Entry.Source, Constants.DestinationOptionSameAsSource
			End If

		End Select

	Next
	
	Set PopulateDestinationDefaults = GPMMigrationTable

End Function



' Returns a dictionary object
' containing the named arguments and values that were passed in
Function ProcessCommandLineArguments()

	Dim szTableName      : szTableName    = ""
	Dim szGPO            : szGPO   = ""
	Dim bAllGPOs         : bAllGPOs    = False
	Dim szBackupLocation : szBackupLocation    = ""
	Dim szDomainName     : szDomainName = ""
	Dim bOverwrite       : bOverwrite = False
	Dim bMapByName       : bMapByName = False


	' Check if this is cscript. If not, print an error and bail out
	If UCase(Right(WScript.FullName,11)) = "WSCRIPT.EXE" Then
		WScript.Echo "You must use cscript.exe to execute this script."
		WScript.Quit(-1)
	End If


	If WScript.Arguments.Length = 0 Then
		WScript.Arguments.ShowUsage()
		WScript.Quit(-1)
	End If
	
	Dim Result : Set Result = CreateObject("Scripting.Dictionary")

	szTableName = WScript.Arguments(0)
	
	' Get the GPO to process, if specified
	If WScript.Arguments.Named.Exists("GPO") Then
		szGPO = WScript.Arguments.Named("GPO")
	End If

	' See if we should process all GPOs in the domain
	If WScript.Arguments.Named.Exists("AllGPOs") Then
		bAllGPOs = True
	End If

	' See if a backup location was passed in
	If WScript.Arguments.Named.Exists("BackupLocation") Then
		szBackupLocation = WScript.Arguments.Named("BackupLocation")
	End If

	' See if we should overwrite the file if it already exists
	If WScript.Arguments.Named.Exists("Overwrite") Then
		bOverwrite = True
	End If

	' See if we should map by relative name by default
	If WScript.Arguments.Named.Exists("MapByName") Then
		bMapByName = True
	End If

	' Get the domain to use, if specified
	If WScript.Arguments.Named.Exists("Domain") Then
		szDomainName = WScript.Arguments.Named("Domain")
	End If

	' Get the current domain if none was specified
	If szDomainName = "" And (szGPO <> "" Or bAllGPOs = True) Then
		szDomainName = GetDNSDomainForCurrentUser()
	End If

	Result.Add "TableName"      , szTableName
	Result.Add "GPO"            , szGPO
	Result.Add "AllGPOs"        , bAllGPOs
	Result.Add "BackupLocation" , szBackupLocation
	Result.Add "Overwrite"      , bOverwrite
	Result.Add "MapByName"      , bMapByName
	Result.Add "Domain"         , szDomainName
	
	Set ProcessCommandLineArguments = Result

End Function

</script>

<!-- Usage and command line argument information -->
<runtime>

<description>
Creates a migration table that can be edited and used for mapping paths
and security principals when performing import and copy operations.

The scripts can optionally pre-populate the table from various sources,
including individual GPOs, a backup location containing GPO backups and
all GPOs in the specified domain.

If you specify the /MapByName switch, the entries will use the 
"MapByRelativeName" option, which will expect a corresponding 
account with the same name as the original in the destination domain. 
</description>

<unnamed name="TableName" helpstring="The file name of the migration table to be created" type="string" required="true" />
<named name="GPO" helpstring="The name of a GPO to process when building the migration table" type="string" required="false" />
<named name="BackupLocation" helpstring="File system location where backups are located" type="string" required="false" />
<named name="AllGPOs" helpstring="Flag specifying to process all GPOs in the domain" type="simple" required="false" />
<named name="Overwrite" helpstring="If specified, will overwrite an existing XML instead of appending to it" type="simple" required="false" />
<named name="MapByName" helpstring="If specified, will set the default destination to map by relative name" type="simple" required="false" />
<named name="Domain" helpstring="DNS name of domain" type="string" required="false" />

<example>
Example: CreateMigrationTable.wsf SampleTable.migtable /BackupLocation:c:\GPOBackups /OverWrite /MapByName
</example>

</runtime>

</job>