////////////////////////////////////////////////////////////////////////////
// Copyright (c) Microsoft Corporation.  All rights reserved
//
// Title:	FindDuplicateNamedGPOs.wsf
// Author:	mtreit@microsoft.com
// Created:	11/2/2001
//
// Purpose:	Finds all GPOs in the domain that have duplicate names
//		and prints them out
////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////
// Initialization
///////////////////////////////////////
<job>

// Include necessary libraries
<script language="JScript" src="Lib_CommonGPMCFunctions.js"/>

<script language="JScript">

// Create global objects for use by the rest of the script
var GPM = new ActiveXObject("GPMgmt.GPM");
var Constants = GPM.GetConstants();

///////////////////////////////////////
// Main script
///////////////////////////////////////

// Handle command line arguments
var ArgumentList = ProcessCommandLineArguments(WScript.Arguments);
var szDomainName = ArgumentList.Item("Domain");

// Initialize the Domain object
var GPMDomain = GPM.GetDomain(szDomainName, "", Constants.UseAnyDC);

WScript.Echo("Looking for GPOs with duplicate names in " + szDomainName);

// Get a collection containing all GPOs in the domain
var GPMSearchCriteria = GPM.CreateSearchCriteria();

// Passing in a blank SearchCriteria returns all GPOs
var GPOList = GPMDomain.SearchGPOs(GPMSearchCriteria);

var GPO, e2, i, bFoundMatch;
var aGPONameList = new Array();
var GPOList2;

// Iterate through the collection and build a list of names that occur more than once
var e = new Enumerator(GPOList);
for (; !e.atEnd(); e.moveNext())
{
	GPO = e.item();

	// Reinitialize our search criteria object
	GPMSearchCriteria = GPM.CreateSearchCriteria();

	// Perform a search for GPOs with that name and see if we get more than one
	GPMSearchCriteria.Add(Constants.SearchPropertyGPODisplayName, Constants.SearchOpEquals, GPO.DisplayName);
	GPOList2 = GPMDomain.SearchGPOs(GPMSearchCriteria);
	if (GPOList2.Count > 1)
	{
		// Duplicate names exist for this GPO, so add it to
		// our list if it's not already there
		//
		if (!(ItemExists(aGPONameList, GPO.DisplayName)))
		{
			aGPONameList = aGPONameList.concat(GPO.DisplayName);
		}
	}
}

if (aGPONameList.length == 0)
{
	WScript.Echo("No duplicate named GPOs found.");
	WScript.Quit();
}

// Now we have an array of GPO names that occur more than once
// For each name in the list, print out the list of GPOs with
// that name
e2 = new Enumerator(aGPONameList);
for (; !e2.atEnd(); e2.moveNext())
{
	WScript.Echo("\n" + e2.item());
	var GPMSearchCriteria = GPM.CreateSearchCriteria();
	GPMSearchCriteria.Add(Constants.SearchPropertyGPODisplayName, Constants.SearchOpEquals, e2.item());
	GPOList = GPMDomain.SearchGPOs(GPMSearchCriteria);
	e = new Enumerator(GPOList);
	for (; !e.atEnd(); e.moveNext())
	{
		WScript.Echo("\t" + e.item().ID);
	}	
}

///////////////////////////////////////
// Function Definitions
///////////////////////////////////////

// Checks for the existence of an item in an array
function ItemExists(aList, Value)
{
	for (var i = 0; i < aList.length; i++)
	{
		if (aList[i] == Value)
		{
			return true;
		}
	}

	return false;
}

// Takes a WScript.Arguments object and returns a dictionary object
// containing the named arguments and values that were passed in
//
function ProcessCommandLineArguments(Arguments)
{
	var szDomainName = "";

	// Check if this is cscript. If not, print an error and bail out
	if (WScript.FullName.toLowerCase().search("wscript") > 0)
	{
		WScript.Echo("You must use cscript.exe to execute this script.");
		WScript.Quit();
	}

	var Result = new ActiveXObject("Scripting.Dictionary");

	if (Arguments.Named.Exists("Domain"))
	{
		szDomainName = Arguments.Named("Domain");
	}

	// Get the current domain if none was specified
	if (szDomainName == "")
	{
		szDomainName = GetDNSDomainForCurrentUser();
	}

	Result.add("Domain", szDomainName);
	
	return Result;
}

</script>

<!-- Usage and command line argument information -->
<runtime>

<description>
Searches for all GPOs with duplicate names in a given domain.
</description>

<named name="Domain" helpstring="DNS name of domain" type="string" required="false" />

<example>
Example: FindDuplicateNamedGPOs.wsf /domain:Test.MyDomain.com
</example>

</runtime>

</job>